#include <iostream>

class MergeSort {
private:
    int* arr;
    int size;

public:
    MergeSort(int size) {
        this->size = size;
        arr = new int[size];
    }

    ~MergeSort() {
        delete[] arr;
    }

    void inputArray() {
        std::cout << "Enter " << size << " elements:" << std::endl;
        for (int i = 0; i < size; i++) {
            std::cin >> arr[i];
        }
    }

    void merge(int left, int middle, int right) {
        int n1 = middle - left + 1;
        int n2 = right - middle;

        int* leftArr = new int[n1];
        int* rightArr = new int[n2];

        for (int i = 0; i < n1; i++) {
            leftArr[i] = arr[left + i];
        }
        for (int j = 0; j < n2; j++) {
            rightArr[j] = arr[middle + 1 + j];
        }

        int i = 0, j = 0, k = left;

        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k++] = leftArr[i++];
            } else {
                arr[k++] = rightArr[j++];
            }
        }

        while (i < n1) {
            arr[k++] = leftArr[i++];
        }

        while (j < n2) {
            arr[k++] = rightArr[j++];
        }

        delete[] leftArr;
        delete[] rightArr;
    }

    void mergeSort(int left, int right) {
        if (left < right) {
            int middle = left + (right - left) / 2;
            mergeSort(left, middle);
            mergeSort(middle + 1, right);
            merge(left, middle, right);
        }
    }

    void sort() {
        mergeSort(0, size - 1);
    }

    void display() {
        std::cout << "Sorted Array: ";
        for (int i = 0; i < size; i++) {
            std::cout << arr[i] << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    int size;
    std::cout << "Enter the size of the array: ";
    std::cin >> size;

    MergeSort mergeSortObj(size);
    mergeSortObj.inputArray();
    mergeSortObj.sort();
    mergeSortObj.display();

    return 0;
}
