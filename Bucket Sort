#include <iostream>
#include <vector>
using namespace std;

static void BucketSort(int* data, int count) {
    int minValue = data[0];
    int maxValue = data[0];

    for (int i = 1; i < count; i++) {
        if (data[i] > maxValue)
            maxValue = data[i];
        if (data[i] < minValue)
            minValue = data[i];
    }

    int bucketLength = maxValue - minValue + 1;
    vector<int>* bucket = new vector<int>[bucketLength];

    for (int i = 0; i < bucketLength; i++) {
        bucket[i] = vector<int>();
    }

    for (int i = 0; i < count; i++) {
        bucket[data[i] - minValue].push_back(data[i]);
    }

    int k = 0;
    for (int i = 0; i < bucketLength; i++) {
        int bucketSize = bucket[i].size();

        if (bucketSize > 0) {
            for (int j = 0; j < bucketSize; j++) {
                data[k] = bucket[i][j];
                k++;
            }
        }
    }

    delete[] bucket;
}

int main() {
    int size, i;

    cout << "Enter the size of the array: ";
    cin >> size;

    int* a = new int[size]; // Dynamic allocation of the array

    cout << "Enter the elements of the array: ";
    for (i = 0; i < size; i++) {
        cin >> a[i];
    }

    cout << "Current array is: ";
    for (i = 0; i < size; i++) {
        cout << " " << a[i];
    }
    cout << endl;

    BucketSort(a, size);

    cout << "Sorted array is: ";
    for (i = 0; i < size; i++) {
        cout << " " << a[i];
    }

    delete[] a; // Free the dynamically allocated memory

    return 0;
}
