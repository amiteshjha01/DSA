#include <iostream>
#include <limits>

class PrimMST {
private:
    static const int V = 5;
    int graph[V][V];

public:
    PrimMST() {
        // Initialize the graph with user input
        initializeGraph();
    }

    void initializeGraph() {
        std::cout << "Enter the adjacency matrix for the graph (5x5):\n";
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                std::cin >> graph[i][j];
            }
        }
    }

    int minKey(int key[], bool mstSet[]) {
        int min = std::numeric_limits<int>::max();
        int min_index;

        for (int v = 0; v < V; ++v) {
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                min_index = v;
            }
        }

        return min_index;
    }

    void printMST(int parent[]) {
        std::cout << "Edge \tWeight\n";
        for (int i = 1; i < V; ++i) {
            std::cout << parent[i] << " - " << i << " \t" << graph[i][parent[i]] << "\n";
        }
    }

    void primMST() {
        int parent[V];
        int key[V];
        bool mstSet[V];

        for (int i = 0; i < V; ++i) {
            key[i] = std::numeric_limits<int>::max();
            mstSet[i] = false;
        }

        key[0] = 0;
        parent[0] = -1;

        for (int count = 0; count < V - 1; ++count) {
            int u = minKey(key, mstSet);
            mstSet[u] = true;

            for (int v = 0; v < V; ++v) {
                if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
            }
        }

        printMST(parent);
    }
};

int main() {
    PrimMST primMST;
    primMST.primMST();

    return 0;
}
