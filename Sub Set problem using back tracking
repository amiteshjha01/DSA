#include <iostream>
using namespace std;

class SubsetSum {
private:
    bool flag;

public:
    SubsetSum() : flag(false) {}

    void printSubsetSum(int i, int n, int set[], int targetSum, int subset[]) {
        if (targetSum == 0) {
            // Prints valid subset
            flag = true;
            cout << "[ ";
            for (int i = 0; i < n; i++) {
                if (subset[i] == 1) {
                    cout << set[i] << " ";
                }
            }
            cout << "]";
            return;
        }

        if (i == n) {
            // return if we have reached at the end of the array
            return;
        }

        // Not considering the current element
        subset[i] = 0;
        printSubsetSum(i + 1, n, set, targetSum, subset);

        // Consider the current element if it is less than or equal to targetSum
        if (set[i] <= targetSum) {
            // Push the current element in the subset
            subset[i] = 1;

            // Recursive call to consider the current element
            printSubsetSum(i + 1, n, set, targetSum - set[i], subset);

            // Reset the subset array to 0 after recursive call
            subset[i] = 0;
        }
    }

    void solveSubsetSum() {
        int n, sum;

        cout << "Enter the number of elements in the set: ";
        cin >> n;

        int set[n];

        cout << "Enter the elements of the set: ";
        for (int i = 0; i < n; i++) {
            cin >> set[i];
        }

        cout << "Enter the target sum: ";
        cin >> sum;

        int subset[n] = {0}; // Initialize subset array with zeros

        printSubsetSum(0, n, set, sum, subset);

        if (!flag) {
            cout << "There is no such subset";
        }
    }
};

int main() {
    SubsetSum subsetSumObj;
    subsetSumObj.solveSubsetSum();

    return 0;
}
