#include <iostream>
#include <vector>

class CountingSort {
private:
    std::vector<int> arr;
    int max_value;
    int min_value;

public:
    CountingSort(std::vector<int> input) : arr(input) {
        // Find the minimum and maximum values in the input array
        max_value = *std::max_element(arr.begin(), arr.end());
        min_value = *std::min_element(arr.begin(), arr.end());
    }

    void sort() {
        int range = max_value - min_value + 1;

        // Create a count array to store the count of each element
        std::vector<int> count(range, 0);

        // Count the occurrences of each element in the input array
        for (int i = 0; i < arr.size(); i++) {
            count[arr[i] - min_value]++;
        }

        // Reconstruct the sorted array from the count array
        int index = 0;
        for (int i = 0; i < range; i++) {
            while (count[i] > 0) {
                arr[index] = i + min_value;
                index++;
                count[i]--;
            }
        }
    }

    void display() {
        std::cout << "Sorted array: ";
        for (int num : arr) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    std::vector<int> arr = {4, 2, 2, 8, 3, 3, 1};
    CountingSort countingSort(arr);

    std::cout << "Original array: ";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    countingSort.sort();
    countingSort.display();

    return 0;
}
