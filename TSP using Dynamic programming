#include <iostream>
#include <climits>

using namespace std;

const int n = 4;
const int MAX = 1000000;

class TravellingSalesman {
private:
    int dist[n + 1][n + 1];
    int memo[n + 1][1 << (n + 1)];

public:
    TravellingSalesman() {
        // Initialize the dist matrix with user input
        cout << "Enter the distance matrix for the graph (1-based):\n";
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= n; ++j) {
                cin >> dist[i][j];
            }
        }
    }

    int tsp(int i, int mask) {
        if (mask == ((1 << i) | 3))
            return dist[1][i];

        if (memo[i][mask] != 0)
            return memo[i][mask];

        int res = MAX;

        for (int j = 1; j <= n; j++)
            if ((mask & (1 << j)) && j != i && j != 1)
                res = min(res, tsp(j, mask & (~(1 << i))) + dist[j][i]);

        return memo[i][mask] = res;
    }

    int findShortestPath() {
        int ans = MAX;
        for (int i = 1; i <= n; i++)
            ans = min(ans, tsp(i, (1 << (n + 1)) - 1) + dist[i][1]);

        return ans;
    }
};

int main() {
    TravellingSalesman salesman;
    int shortestPathCost = salesman.findShortestPath();
    printf("The cost of the most efficient tour = %d", shortestPathCost);

    return 0;
}
