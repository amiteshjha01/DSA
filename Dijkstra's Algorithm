#include <iostream>
#include <limits>

class DijkstraSP {
private:
    static const int V = 9;
    int graph[V][V];

public:
    DijkstraSP() {
        // Initialize the graph with user input
        initializeGraph();
    }

    void initializeGraph() {
        std::cout << "Enter the adjacency matrix for the graph (9x9):\n";
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                std::cin >> graph[i][j];
            }
        }
    }

    int minDistance(int dist[], bool sptSet[]) {
        int min = std::numeric_limits<int>::max();
        int min_index;

        for (int v = 0; v < V; ++v) {
            if (!sptSet[v] && dist[v] <= min) {
                min = dist[v];
                min_index = v;
            }
        }

        return min_index;
    }

    void printSolution(int dist[]) {
        std::cout << "Vertex \t Distance from Source" << std::endl;
        for (int i = 0; i < V; ++i) {
            std::cout << i << " \t\t\t\t" << dist[i] << std::endl;
        }
    }

    void dijkstra(int src) {
        int dist[V];
        bool sptSet[V];

        for (int i = 0; i < V; ++i) {
            dist[i] = std::numeric_limits<int>::max();
            sptSet[i] = false;
        }

        dist[src] = 0;

        for (int count = 0; count < V - 1; ++count) {
            int u = minDistance(dist, sptSet);
            sptSet[u] = true;

            for (int v = 0; v < V; ++v) {
                if (!sptSet[v] && graph[u][v] && dist[u] != std::numeric_limits<int>::max() && dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                }
            }
        }

        printSolution(dist);
    }
};

int main() {
    DijkstraSP dijkstraSP;
    dijkstraSP.dijkstra(0);

    return 0;
}
